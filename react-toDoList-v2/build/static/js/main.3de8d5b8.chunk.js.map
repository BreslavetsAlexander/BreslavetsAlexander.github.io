{"version":3,"sources":["components/ButtonsPanel.js","components/InputPanel.js","components/ToDoItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ButtonsPanel","props","react_default","a","createElement","className","type","onClick","doneItems","restoreItems","removeItems","InputPanel","selectAll","style","marginRight","onKeyDown","event","addItem","styles","item","display","alignItems","justifyContent","padding","borderTop","todoDone","textDecoration","fontStyle","color","ToDoItem","checked","onChange","checkItem","margin","id","title","Date","now","Object","objectSpread","done","htmlFor","doneItem","float","removeItem","restoreItem","ToDoList","toDoItems","map","i","key","state","e","keyCode","target","value","trim","length","toConsumableArray","this","unshift","setState","splice","forEach","filter","k","bind","Fragment","marginTop","activePanel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_default","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3de8d5b8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function(props) {\r\n    return (\r\n        <div className=\"btn-group btn-block\">\r\n            <button type='button' onClick={props.doneItems} className='btn btn-success'>Done</button>\r\n            <button type='button' onClick={props.restoreItems} className='btn btn-info'>Restore</button>\r\n            <button type='button' onClick={props.removeItems} className='btn btn-danger'>Remove</button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function(props) {\r\n    return (\r\n        <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n                <span>\r\n                    <button onClick={props.selectAll} className=\"btn btn-outline-primary\" type=\"button\" style={{marginRight: '5px'}}>Select all</button>\r\n                </span>\r\n            </div>\r\n            <input type=\"text\" onKeyDown={event => props.addItem(event)} className=\"form-control\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst styles = {\r\n    item: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '15px 1.25rem',\r\n        borderTop: '1px solid #ccc'\r\n    },\r\n    todoDone: {\r\n        textDecoration: 'line-through',\r\n        fontStyle: 'italic',\r\n        color: 'gray'\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    return (\r\n        <li className=\"item\" style={styles.item}>\r\n            <input  checked={props.item.checked} onChange={props.checkItem} style={{margin: 0}} className=\"form-check-input\" type=\"checkbox\" id={props.item.title + Date.now()} />\r\n            <label style={{margin: '-4.8px 0 0 15px', ...props.item.done ? styles.todoDone : null}} className=\"form-check-label\" htmlFor={props.item.title + Date.now()}>{props.item.title}</label>\r\n            <button onClick={props.doneItem} type=\"button\" style={{float: \"right\", display: props.item.done ? \"none\" : \"block\"}} className=\"btn btn-outline-success\">Done</button>\r\n            <div style={{float: \"right\", display: !props.item.done ? \"none\" : \"block\"}}>\r\n                <button onClick={props.removeItem} type=\"button\" className=\"btn btn-outline-danger\">Remove</button>\r\n                <button onClick={props.restoreItem} type=\"button\" className=\"btn btn-outline-info\">Restore</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import React from 'react'\r\nimport ToDoItem from './ToDoItem'\r\n\r\nexport default function(props) {\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {\r\n                props.toDoItems.map((item, i) => {\r\n                    return <ToDoItem \r\n                                key={i}\r\n                                item={item}\r\n                                checkItem={()=>props.checkItem(i)}\r\n                                doneItem={()=>props.doneItem(i)}\r\n                                restoreItem={()=>props.restoreItem(i)}\r\n                                removeItem={()=>props.removeItem(i)}\r\n                            />\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}","import React from 'react'\nimport ButtonsPanel from './components/ButtonsPanel'\nimport InputPanel from './components/InputPanel'\nimport ToDoList from './components/ToDoList';\n\nexport default class extends React.Component {\n  state = {\n    toDoItems: [\n      {title: \"React\", done: false, checked: false},\n      {title: \"In\", done: false, checked: false},\n      {title: \"Action\", done: false, checked: false},\n    ]\n  }\n  addItem(e) {\n    if (e.keyCode===13 && e.target.value.trim().length) {\n      const toDoItems = [...this.state.toDoItems];\n      toDoItems.unshift({\n        title: e.target.value,\n        done: false,\n        checked: false\n      });\n      this.setState({toDoItems});\n      e.target.value = '';\n    }\n  }\n  checkItem(i) {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems[i].checked = !toDoItems[i].checked;\n    this.setState({toDoItems});\n  }\n  doneItem(i) {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems[i].done = true;\n    this.setState({toDoItems});\n  }\n  restoreItem(i) {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems[i].done = false;\n    this.setState({toDoItems});\n  }\n  removeItem(i) {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems.splice(i, 1);\n    this.setState({toDoItems});\n  }\n  selectAll() {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems.forEach(item => {\n      item.checked = true;\n    })\n    this.setState({toDoItems});\n  }\n  doneItems() {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems.forEach(item => {\n      if (item.checked){\n        item.done = true;\n        item.checked = false;\n      }\n    })\n    this.setState({toDoItems});\n  }\n  restoreItems() {\n    const toDoItems = [...this.state.toDoItems];\n    toDoItems.forEach(item => {\n      if (item.checked){\n        item.done = false;\n        item.checked = false;\n      }\n    })\n    this.setState({toDoItems});\n  }\n  removeItems() {\n    let toDoItems = [...this.state.toDoItems];\n    toDoItems = toDoItems.filter(item => !item.checked);\n    this.setState({toDoItems});\n  }\n  activePanel() {\n    let k = 0;\n    this.state.toDoItems.forEach(item => {\n      if (item.checked) {\n        k++;\n      }\n    })\n    return k<1 ? <InputPanel \n                    selectAll={this.selectAll.bind(this)} \n                    addItem={this.addItem.bind(this)}\n                  /> \n                : <ButtonsPanel\n                    doneItems={this.doneItems.bind(this)}\n                    restoreItems={this.restoreItems.bind(this)}\n                    removeItems={this.removeItems.bind(this)}\n                  />\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"card\" style={{marginTop: '10px'}}>\n          <div className=\"card-header\">\n            <h4 className=\"card-title\">Todo React application</h4>\n          </div>\n          <div className=\"card-body\">\n            {this.activePanel()}\n          </div>\n          <ToDoList\n            toDoItems={this.state.toDoItems}\n            checkItem={this.checkItem.bind(this)}\n            doneItem={this.doneItem.bind(this)}\n            restoreItem={this.restoreItem.bind(this)}\n            removeItem={this.removeItem.bind(this)}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('.container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}